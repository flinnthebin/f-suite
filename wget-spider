#!/usr/bin/env sh

# Usage:
#   Spider mode (no page download):
#       ./wget_spider.sh [-o output_file] [-c client_cert_file] [-p client_cert_password] URL
#
#   Save mode (download pages to "spider_dir" for grepping):
#       ./wget_spider.sh [-o output_file] [-c client_cert_file] [-p client_cert_password] -s URL

outfile="wget_output.txt"
client_cert=""
client_pass=""
save_mode=0

usage() {
  echo "Usage: $0 [-o output_file] [-c client_cert_file] [-p client_cert_password] [-s] URL"
  exit 1
}

while getopts ":o:c:p:s" opt; do
  case ${opt} in
    o)
      outfile="$OPTARG"
      ;;
    c)
      client_cert="$OPTARG"
      ;;
    p)
      client_pass="$OPTARG"
      ;;
    s)
      save_mode=1
      ;;
    :)
      echo "Error: Option -$OPTARG requires an argument."
      usage
      ;;
    \?)
      echo "Error: Invalid option -$OPTARG"
      usage
      ;;
  esac
done

shift $((OPTIND - 1))
if [ $# -ne 1 ]; then
  echo "Error: Missing URL."
  usage
fi

url="$1"

if [ "$save_mode" -eq 1 ]; then
  download_dir="spider_dir"
  echo "Save mode enabled. Downloading HTML files into directory: $download_dir"
  mkdir -p "$download_dir" || { echo "Error creating directory: $download_dir"; exit 1; }
  mode_option="-P $download_dir"
else
  echo "Running wget in spider mode..."
  mode_option="--spider"
fi

echo "Target URL: $url"
echo "Logging wget output to: $outfile"

if [ -n "$client_cert" ]; then
  if [ -n "$client_pass" ]; then
    echo "Using client certificate: $client_cert with provided password."
    tmp_cert=$(mktemp) || { echo "Error creating temporary file."; exit 1; }
    tmp_key=$(mktemp) || { echo "Error creating temporary file."; exit 1; }

    if ! openssl x509 -in "$client_cert" -out "$tmp_cert"; then
      echo "Error extracting certificate from $client_cert"
      rm -f "$tmp_cert" "$tmp_key"
      exit 1
    fi

    if ! openssl rsa -in "$client_cert" -passin pass:"$client_pass" -out "$tmp_key"; then
      echo "Error decrypting private key from $client_cert"
      rm -f "$tmp_cert" "$tmp_key"
      exit 1
    fi

    wget -r $mode_option --certificate="$tmp_cert" --private-key="$tmp_key" "$url" -o "$outfile"

    rm -f "$tmp_cert" "$tmp_key"
  else
    echo "Using client certificate: $client_cert (no password provided)."
    wget -r $mode_option --certificate="$client_cert" --private-key="$client_cert" "$url" -o "$outfile"
  fi
else
  wget -r --ignore-robots $mode_option "$url" -o "$outfile"
fi

echo "Spidering complete."
